#!/usr/bin/env node

const http = require('http');
let app = require('../app');
let game = require('../public/javascripts/game.js');
/*
** MQTT DEPENDENCIES
*/
const mqtt = require('mqtt');

/*
** END MQTT DEPENDENCIES
*/


// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
  res.status(404);
  res.render('not-found');
});

app.use((err, req, res, next) => {
  // always log the error
  console.error('ERROR', req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.render('error');
  }
});

let server = http.createServer(app);

/*
**  MQTT CLIENT
*/

const mqttClient = mqtt.connect('ws://192.168.1.33:9001', {clientId:"server_app"});

/*
**  GAME UTILS
*/

let handlerMessage = (topic, msg) => {
  // Si el msg y el topic es igual 1º conexion del jugador, add jugador y suscribirse al topic
  if (topic === msg.toString()) {
    let name = topic.split('/');
    name = name[1];
    game.rooms[0].metodos.addJugador(name);
    console.log(game.rooms[0]);
    mqttClient.subscribe(topic);
    mqttClient.publish(topic, `Wellcome ${name} game will start soon.`);
  } else {
    console.log("Topic: ", topic);
    console.log("Mensaje: ", msg.toString());
  }
}

/*
**  END GAME UTILS
*/

/*
**  CONFIG MQTT SERVER
*/




/*
**  Subscripcion a Topic commun: Game/common
**  Subscripcion a todos los Topic: #
**  Subscripcion a los Topicos de cada usuario: Game/user_id => añadir a array de jugadores 
*/

const commonTopic = 'Game/common';
const responseTopic = 'responseFromServer';

mqttClient.on('connect', function () {
  console.log('Server connected to Mqtt broker');
  mqttClient.subscribe("#");
  mqttClient.subscribe(commonTopic);
});

// On receiving message from any client
mqttClient.on('message', function (topic, message, packet) {
/*     console.log('Received query from client: -', message.toString());
    console.log("topic:", topic);
    // Responding to client
    mqttClient.publish(responseTopic, 'Hello client, yes I can hear you');
    console.log('Responded to client'); */
    handlerMessage(topic, message);
});


/*
**  END CONFI MQTT SERVER
*/


server.on('error', error => {
  if (error.syscall !== 'listen') { throw error }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});


server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});

